Após instalar o git:
git config --global user.name "nome de usuario" [Enter]
git config --global user.email "email" [Enter]
---------
Após criar diretório local:
Entra no diretório (com o git bash)
git init [Enter] (vai ser criada uma pasta oculta .git nesse diretório)

caso você esteja criando um repositório em um servidor que vai ser disponibilizado para outras estações, você vai dar um
git init --bare
---------

Após adicionar arquivos nesse diretorio que tem a pasta .git:
git status (mostra os arquivos alterados/adicionados no working directory ou staging area)
---- transfere os arquivos do working directory para a staging area --
git add .
git add *.txt
git add arquivo.txt   
----
---- transfere os arquivos da staging area para o git directory --
git commit -m "mensagem do commit" (o -m é para adicionar mensagem, com apenas git commit, ao dar o enter ele pede depois a mensagem)

git commit -a -m "mensagem do commit" (com o commit -a ele já adiciona e comita)

git commit --amend -m "mensagem" (adiciona no ultimo commit, como se fosse o mesmo commit(altera inclusive a mensagem, é como se fosse uma edição do ultimo commit))
---------
Consultar alterações feitas em um arquivo que não foi adiciona para sua staging area:
git diff

Consultar alterações feitas em um arquivo que estão em sua staging area:
git diff --staged
---------
Histórico de todos os comites:
git log

Mostra detalhes do que foi feito em cada commit (é como se fosse um log + diff no git directory):
git log -p

Limitar a quantidade de commits que se quer trazer na tela através do comando log:
git log -p -1 (o -1 é a quantidade de commits que se quer trazer)

git log -pretty=oneline mostra apenas o código de cada commit e a mensagem do commit.

gitk abre a interface gráfica do git com todos os commits e alterações.
---------
Remover um arquivo da staging area devolvendo para o working directory:
git reset HEAD teste.txt (caso já tenha sido dado um git add teste.txt)
---------
Descartar uma mudança que está no working directory:
git checkout -- teste.txt (reverte as alterações)
---------

Ao remover um arquivo no working directory, o git pode reclamar que arquivos foram removidos.
Da mesma forma q existe o add . para adicionar arquivos existe o comando para remover arquivos:
git rm teste.txt
---------
Para criar uma tag (git tag, mostra todas as tags):
git tag -a v1.0 (nome da tag) -m "Mensagem"
git tag -a v1.0 -m "v1.0"

Criar tag a partir de um commit anterior:
git tag -a v0.0 3247beb5ca88d1964862dd8de704032c5e824d2d -m "versao 0.0"  (a numeracao é a chave do commit que pode pegar com o git log --pretty=oneline)
---------
Mostrar detalhes da tag:
git show v0.0
Deletar a tag:
git tag -d v0.0
---------
Para criar um branch a partir de outro:

Entra no branch de onde vai sair a ramificação (por exemplo branch Master).
git checkout master

cria um branch chamado teste

git branch teste (criou o branch teste. para entrar nele digita git checkout teste )

git checkout -b teste (cria o branch teste e já entra nele)
---------
se faço alterações em um branch criado a partir de outro (por exemplo branch teste criado a apartir do branch master),
posso fazer o merge, que é trazer as alterações do branch teste para o master.
git checkout master (branch que irá receber as alterações)
git merge teste (traz as alterações do teste para o master)
---------

usuou o branch e agora quer deleta-lo:
git branch -d teste
---------
git push origin master (manda os commits do master local par ao master no servidor. Para saber se o servidor é origin, você usa o git remote)
git pull origin master (traz as alterações do servidor para o master local)
---------
ssh -keygen cria uma chave ssh para informar ao github que o computador pode ter acesso aquela conta.
vai ser informado onde foi criado essa chave, e adiciona ela no github para permitir acesso pelo computador local.
depois para clonar um repositório do github, como está sendo feito autenticação ssh, vai copiar a chave ssh do diretório no github.
git clone git@github.com:wiltonrabelo/testeNovo.git nomeParaODiretorioLocal(caso queira, a pasta clonada pode vir com um nome que vc escolher) 



